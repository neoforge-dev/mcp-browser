# NEO Rules for MCP Browser Project

## Project-Specific Patterns

1. **Docker-First Development**
   - Always test changes in Docker environment before committing
   - Use volume mounts for local development to speed up iteration
   - Keep Docker images slim by using multi-stage builds where appropriate

2. **Security Considerations**
   - Never run browser processes as root
   - Always use environment variables for secrets
   - Apply AppArmor profiles for all containers
   - Validate and sanitize all user inputs
   - Use virtual display server (Xvfb) for isolation

3. **Python Best Practices**
   - Use async/await for all IO operations
   - Type hint all functions for better IDE support
   - Use dataclasses for structured data
   - Prefer composition over inheritance
   - Use dependency injection for testability

4. **Playwright Usage Patterns**
   - Create isolated browser contexts for each session
   - Handle browser errors with structured error types
   - Use page.evaluate sparingly for better performance
   - Manage browser resources carefully (close pages when done)
   - Use stealth mode for more realistic browser behavior
   - Access browser_context.pages as a property, not a method (no await needed)
   - Always check if pages exist before accessing them
   - Handle parameters differently for element methods vs page methods

5. **MCP Protocol Extensions**
   - Follow existing MCP patterns for tool definitions
   - Return structured JSON for all responses
   - Use WebSockets for real-time events
   - Include metadata with all responses (timing, etc.)
   - Namespace browser-specific tools appropriately
   - Use consistent error handling with try/except blocks
   - Implement proper page navigation and lifecycle management
   - Use descriptive error messages for easier debugging

## User Preferences

1. **Code Organization**
   - Module structure: src/[module]/[feature].py
   - Test structure: tests/[module]/test_[feature].py
   - Separation of UI, business logic, and data access
   - Configuration via environment variables, not files
   - Documentation in Markdown format

2. **Testing Approach**
   - Unit tests for all core functionality
   - Integration tests for API endpoints
   - Browser tests run in a similar container environment
   - Mocking external dependencies for unit tests
   - Test coverage target: 80%+
   - Use test scripts for API endpoint verification
   - Save test results to output directory for later inspection

3. **Documentation Style**
   - RESTful API documented with OpenAPI
   - Code comments focus on "why" not "what"
   - README-driven development (write docs first)
   - Example scripts for common operations
   - Architecture diagrams in ASCII format for version control

4. **Deployment Preferences**
   - One-command deployment with Docker Compose
   - Environment-specific configuration via .env files
   - Health checks for all services
   - Graceful shutdown handling
   - Automatic restart capabilities

## Known Project Challenges

1. **Resource Management**
   - Browser automation can be memory-intensive
   - Monitor and adjust container resource limits
   - Consider pooling browser instances for efficiency
   - Implement garbage collection for abandoned sessions

2. **Cross-Platform Compatibility**
   - Local development on macOS, deployment on Linux
   - Xvfb doesn't work the same on all platforms
   - Use Docker to normalize environments
   - Document platform-specific quirks

3. **Security Balancing**
   - Need security, but also need browser functionality
   - AppArmor profiles need careful configuration
   - Balance between isolation and capabilities
   - Regular security scanning for dependencies

4. **Browser Automation Flakiness**
   - Handle intermittent failures gracefully
   - Implement retry mechanisms where appropriate
   - Add detailed logging for debugging
   - Use stable selectors for DOM elements

5. **Performance Considerations**
   - Browser startup time impacts user experience
   - Consider browser pooling for improved responsiveness
   - Optimize Docker image size for faster deployment
   - Cache Playwright browser downloads

## Learned Solutions

1. **Problem**: Xvfb doesn't work properly on macOS for local testing
   **Solution**: Use PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 environment variable and run in headless-only mode for local development on macOS

2. **Problem**: Docker container restart fails to clean up Xvfb processes
   **Solution**: Add trap handlers in xvfb-init.sh script to kill processes on exit signals

3. **Problem**: Playwright browser download is slow
   **Solution**: Use a specific browser (chromium only) instead of all browsers, and consider caching the download in a Docker volume

4. **Problem**: WebSocket connections terminate unexpectedly
   **Solution**: Implement ping/pong mechanism to keep connections alive and detect disconnections

5. **Problem**: Resource limits too restrictive
   **Solution**: Start with conservative limits and monitor actual usage, then adjust accordingly based on real-world metrics

6. **Problem**: JavaScript booleans in Playwright page.evaluate()
   **Solution**: Convert Python boolean values (True/False) to JavaScript boolean values (true/false) using str().lower() when injecting into JavaScript code

7. **Problem**: Complex DOM extraction and analysis
   **Solution**: Use f-strings to inject parameters into JavaScript functions rather than passing them as arguments to Playwright's evaluate method, which can be error-prone for complex structures

8. **Problem**: API testing and verification
   **Solution**: Create dedicated test endpoints that verify all API functionality, save results to output files, and provide detailed error reporting for easier debugging

9. **Problem**: Output file organization
   **Solution**: Create separate directories for each API output type (screenshots, DOM data, CSS analysis, etc.) and use timestamps in filenames to avoid conflicts

10. **Problem**: Cross-viewport testing
    **Solution**: Test responsive behavior by rendering the same page at different viewport sizes and comparing element properties and visibility

11. **Problem**: browser_context.pages access error "object list can't be used in 'await' expression"
    **Solution**: Access browser_context.pages as a property, not awaitable method. Use "pages = browser_context.pages" instead of "pages = await browser_context.pages"

12. **Problem**: Element screenshot with full_page parameter error
    **Solution**: Element screenshots don't support the full_page parameter. Use different parameter sets for page.screenshot() and element.screenshot()

13. **Problem**: Browser page initialization
    **Solution**: Always check if any pages exist before accessing them. Create a new page if none exist during navigation, handle empty page list gracefully in other endpoints

14. **Problem**: API query parameter handling vs body parameter handling
    **Solution**: For GET requests, use query parameters. For POST requests that need both URL and body parameters, support both input methods with clear parameter names 

## WebSocket Event Handling Patterns

1. **Separate Connection Management**: Keep WebSocket connections in separate collections based on their purpose.
   - `active_connections` for general control connections
   - `event_connections` for event subscription connections

2. **Unique Identifiers for Subscriptions**: Use unique identifiers for subscriptions with a descriptive prefix (e.g., `sub_` prefix for subscription IDs) to make them easily identifiable.

3. **Event Filtering Architecture**: Implement filtering as a separate function (`_matches_filters`) to allow flexible extension of filtering criteria.
   - URL pattern matching with regex
   - Page ID exact matching
   - Can be extended with additional filter types

4. **Broadcasting Strategy**: Use an async broadcast function that filters events before sending them to clients, avoiding unnecessary processing and network usage.

5. **Event Type Enumeration**: Use Enums for event types and event names to enforce consistency, make code more readable, and enable static checking.

6. **Subscription Handler Pattern**: Use a dictionary of event types to handler functions for dynamic event handling registration and unregistration.

7. **Client Message Structure**: For WebSocket client messages, use an "action" field to distinguish between different operations (subscribe, unsubscribe, list).

8. **Connection and Subscription Lifecycle**: 
   - Add connections to the active pool on connect
   - Remove connections and their subscriptions on disconnect
   - Send confirmation messages for subscription events
   - Handle errors gracefully with appropriate error messages
   
9. **Event Data Structure**: Include consistent fields in all events:
   - `type`: The event type (PAGE, DOM, CONSOLE, NETWORK)
   - `event`: Specific event name (e.g., "page.load", "console.error")
   - `timestamp`: When the event occurred
   - `data`: Event-specific details
   - `page_id`: (when applicable) Identifier for the source page

## API Endpoint Conventions

// ... existing code ...

## Response Formats

// ... existing code ...

## Testing and Debugging

// ... existing code ...

## File Organization

// ... existing code ... 